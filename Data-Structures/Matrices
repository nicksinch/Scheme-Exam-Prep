; Define foldr function which computers a1 ( op ( a2 ( op ( a3 ( op...( an op F))))))
(define (my-foldr op nv l)
  (if (null? l)
      nv
      (op (car l) (my-foldr op nv (cdr l)))))

; Checks if a preicate is true for all items of the list
(define (all? p? l)
  (my-foldr (lambda (x y) (and x y)) #t (map p? l)))

(define (matrix? m) ; Checks if a matrix
  (and (list? m) (not (null? (car m))) (all? list? m) (all? (lambda (row) (= (length row)
                                                                             (length (car m)))) m)))

(define get-rows length) ; Returns the number of rows in the matrix
(define (get-columns m) (length (car m))) ; Returns the number of cols in matrix

(define get-first-row car) ; Returns the first row
(define (get-first-col m) (map car m)) ; Returns the first col

(define del-first-row cdr) ; Deletes the first row of the matrix
(define (del-first-col m) (map cdr m)) ; Deletes the first col of the matrix

(define (get-row idx m) (list-ref m idx)) ; Returns the row at a particular idx

(define (get-column idx m) ; Returns the col at a particular position
  (map (lambda (row) (list-ref row idx)) m))

(define (transpose m) ; Transposes a matrix
  (if (null? (get-first-row m)) '()
      (cons (get-first-col m) (transpose (del-first-col m)))))

(define (sum-vectors v1 v2) (map + v1 v2)) ; sums two vectors represented as lists
(define (sum-matrices m1 m2) (map sum-vectors m1 m2)) ; sums two matrices using 'sum-vectors'

(define (mult-vectors v1 v2) (apply + (map * v1 v2)))
(define (mult-matrices m1 m2) ; Multiplies two matrices
(let ((m2t (transpose m2)))
(map (lambda (row)
(map (lambda (column) (mult-vectors row column))
m2t))
m1)))
