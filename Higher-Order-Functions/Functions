(define (my-identity x) x)

(define (3+ x) (+ x 3))

(define (inc x) (+ x 1))

(define (fixed-point? f x) (= (f x) x)); Returns true if f(x) = x

; Define a function that computes the following sequence: 1^2 + (k + 1)^2 + ... + 100^2 for k <= 100

(define (k-sum k)
  (if (> k 100) 0 (+ (* k k) (k-sum (+ k 1)))))

; Define a function that computes the following sequence: x + e^x + e ^ ( e ^ x) + ... until addent <= 10 ^ 1000

(define (e-sum x)
  (if (> (expt 10 1000)) 0 (+ x (e-sum (expt x)))))

; Define a function that computes (sum i = 0 to k) term(i), if k = 100 , this means term(0) + term (1) + term(2)...+term(100)

(define (sum a b term next)
  (if (> a b) 0 (+ (term a) (sum (next a) b term next))))

; Define a function that computes (product i = 1 to k) term(i), if k = 100 , this means term(0) * term (1) * term(2)... * term(100)
(define (product a b term next)
  (if (> a b) 1 (* (term a) (product (next a) b term next))))

; Define a function that generalises above functions and computes term(a) op (term(next (a)) op ... (term (b))

(define (accumulate op nv a b term next)
  (if (> a b) nv
      (op (term a) (accumulate op nv (next a) b term next))))

(define (p n x)
  (define (term i) (* (- (inc n) i) (expt x i)))
  (accumulate + 0 0 n term inc))

; Define a function that returns the number of values in the interval [a,b] that are true for the predicate p using 'accumulate'

(define (greater? x) (> x 3)) ; Returns true if the value is greater than 3

(define (count-vals-in-int p a b)
  (accumulate + 0 a b (lambda (x) (if (greater? x) 1 0)) inc))

; Define a function that counts the palindromes in the interval [a,b]

(define (reverse-num x)
  (define (helper number reversed)
    (if (= number 0)
        reversed
        (helper (quotient number 10) (+ (* reversed 10) (remainder number 10)))))
  (helper x 0))
  

(define (is-palindrome? x)
  (= x (reverse-num x)))

(define (count-palindromes a b)
  (accumulate + 0 a b (lambda (x) (if (is-palindrome? x) 1 0)) inc))

(define (exists? predicate? a b)
  (and (<= a b)
       (or (predicate? a)
           (exists? predicate? (+ a 1) b))))

(define (for-all? predicate? a b)
  (or (> a b)
      (and (predicate? a)
           (for-all? predicate? (+ a 1) b))))

; for-all defined using exists? ( if there isn't a number for which the predicate isn't true , return true, else otherwise)

(define (for-all-exists? pr? a b)
  (not (exists? (lambda (x) (not (pr? x))) a b)))

(define (double f)
  (lambda (x) (f (f x))))

(define (square s) (* s s))

(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (zero? n)
      (lambda (x) x)
      (compose f (repeated f (- n 1)))))
           
         


